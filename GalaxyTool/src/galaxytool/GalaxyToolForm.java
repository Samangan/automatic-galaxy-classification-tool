/*
 * GalaxyToolForm.java
 *
 * Created on Nov 30, 2011, 11:28:11 PM
 */
package galaxytool;

/**
 * @author Harry Hull, Craig Williams
 * UALR Department of Computer Science
 * 2012-4-28
 * 
 * This is a tool to automate preprocessing of galaxy images.
 */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class GalaxyToolForm extends javax.swing.JFrame {

    Process p;
    threadClassify t;
    
    private static int lastX = 0, lastY = 0;
    private static float rotation = 0.0f;
    private static int lastSpinnerValue = 0;
    private static String[][] galaxyFiles; // First dimension: file name
    // Second dimension: file classification
    
    private static BufferedImage currentImage;

    /** Creates new form GalaxyToolForm */
    public GalaxyToolForm() {
        initComponents();
        
        fillGalaxyDescriptions();
        jLabel7.setVisible(false);
        jLabel8.setVisible(false);
        jButton3.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = new java.awt.Canvas();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jSlider1 = new javax.swing.JSlider();
        canvas2 = new java.awt.Canvas();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        canvas1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvas1MouseDragged(evt);
            }
        });
        canvas1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                canvas1PropertyChange(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("Process Image");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Auto Rotate");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseReleased(evt);
            }
        });
        jCheckBox1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });

        jSpinner1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSpinner1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSpinner1MouseReleased(evt);
            }
        });
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jSpinner1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSpinner1PropertyChange(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Image Index");

        jToggleButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jToggleButton1.setText("Flip Image Horizontal");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jSlider1.setMaximum(360);
        jSlider1.setValue(0);
        jSlider1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSlider1MouseReleased(evt);
            }
        });
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Color Ratio");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Central Bulge");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Structure Factor");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Rotated: 0 Degrees");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Image:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Still Processing...");
        jLabel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton2.setText("Classifiy Galaxies");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton2MouseReleased(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("RMSE: ");
        jLabel8.setToolTipText("");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Class:");
        
        jButton3.setText("Select Galaxies to Classify");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        
        jTextField1.setText("Input file path to folder to be classified");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1)
                                .addComponent(jButton3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(canvas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1)))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4))
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(9, 9, 9)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jTextField1)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jSpinner1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSpinner1PropertyChange
    jSpinner1MouseReleased(null);
}//GEN-LAST:event_jSpinner1PropertyChange

private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    jSpinner1MouseReleased(null);
}//GEN-LAST:event_jButton1MouseClicked

private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
    jSpinner1MouseReleased(null);
}//GEN-LAST:event_jSpinner1StateChanged

private void jCheckBox1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged
    
}//GEN-LAST:event_jCheckBox1StateChanged

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    jSpinner1MouseReleased(null);
}//GEN-LAST:event_jButton1ActionPerformed

private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
    jSpinner1MouseReleased(null);
}//GEN-LAST:event_jToggleButton1ActionPerformed

private void canvas1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas1MouseDragged
    
}//GEN-LAST:event_canvas1MouseDragged

private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
    rotation = (float)Math.PI * (float)jSlider1.getValue() / 180.0f;
    jSpinner1MouseReleased(null);
}//GEN-LAST:event_jSlider1StateChanged

private void jSlider1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MouseReleased

}//GEN-LAST:event_jSlider1MouseReleased

private void canvas1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_canvas1PropertyChange
    jSpinner1MouseReleased(null);
}//GEN-LAST:event_canvas1PropertyChange

private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    
}//GEN-LAST:event_formComponentResized

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    if(t == null || !t.running) {
        t = new threadClassify(0);
        t.start();
    }
}//GEN-LAST:event_jButton2ActionPerformed

    class threadClassify extends Thread {
        boolean running = false;
        int t;

        threadClassify(int threadn) {
            running = false;
            t = threadn;
        }

        @Override
        public void run() {
            running = true;
            
            System.out.println("Begin classification of current galaxy...");
            
            try {
                p = new Process();
                p.run();
                jLabel7.setText("");
                jLabel7.setVisible(false);
                jLabel8.setVisible(true);
                jLabel8.setText("RMSE: " + p.rmse);
                jButton3.setVisible(true);
            }
            catch(Exception ex) {
                System.out.println(ex.toString());
                jLabel7.setText("Failure classifying galaxies");
            }
            
            running = false;
            
            System.out.println("End classification of current galaxy");
        }
    }

private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseReleased
    jLabel7.setVisible(true);
    jButton2.setEnabled(false);
    jButton2.setVisible(false);
}//GEN-LAST:event_jButton2MouseReleased

private void jSpinner1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSpinner1MouseReleased
    jSpinner1MouseClicked(null);
}//GEN-LAST:event_jSpinner1MouseReleased

private void jCheckBox1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseReleased
    jSpinner1MouseReleased(null);
}//GEN-LAST:event_jCheckBox1MouseReleased

private void jSpinner1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSpinner1MouseClicked
    if(galaxyFiles == null) {
        return;
    }
    
    jLabel9.setText("Class: ");
    
    int newValue = Integer.parseInt(jSpinner1.getValue().toString());
    if(newValue < 0) {
        jSpinner1.setValue(0);
    }
    else if(newValue >= galaxyFiles.length) {
        jSpinner1.setValue(galaxyFiles.length - 1);
    }
    
    try {
        setImageIndex(newValue);
        float [] colorR = getColor(currentImage);
        jLabel2.setText("Color Ratio: " + colorR[0] / colorR[1]);
        jLabel3.setText("Central Bulge: " + getCentralBulge(currentImage));
        jLabel4.setText("Structure Factor: " + getConsistency(currentImage));
    } catch (Exception ex) {
        jSpinner1.setValue(lastSpinnerValue);
    }
    lastSpinnerValue = newValue;
    
    if(p != null && p.readyToClassify) {
        try {
            int galaxyIndex = Integer.parseInt(jSpinner1.getValue().toString());
            int newClass = p.classify(galaxyIndex);
            jLabel9.setText("Predicted Class: " + newClass + ", Error: " + (Integer.parseInt(galaxyFiles[galaxyIndex][1]) - newClass));
        }
        catch(Exception ex) {
            System.out.println(ex.toString());
        }
    }
}//GEN-LAST:event_jSpinner1MouseClicked


private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    if(p != null && p.readyToClassify) {
    	//TODO: check if jTextField is not null
    	String text = jTextField1.getText();
    	System.out.println(text);
    		//classify based on the directory the user inputed
    		//first check if the filepath is legit
    		File f = new File (text);
    		if (!f.isDirectory()) {
    			JOptionPane.showMessageDialog(null, "Not a valid directory path.");
    		} else {
    			p.classify(text);    			
    		}    	
    }
}//GEN-LAST:event_jButton3ActionPerformed


    static private float getConsistency(BufferedImage img) {
        int imgWidth = img.getWidth();
        if (img.getHeight() < imgWidth) {
            imgWidth = img.getHeight();
        }

        float[] consistencyArray = new float[imgWidth / 2];

        for (int i = 0; i < consistencyArray.length; i++) {
            consistencyArray[i] = 0;
        }

        for (int radius = 0; radius < consistencyArray.length; radius++) {
            for (float angle = 0.0f; angle < 2.0f * Math.PI; angle += Math.PI / 180.0f) {
                int x = (int) (Math.cos(angle) * radius + imgWidth / 2.0f);
                int y = (int) (Math.sin(angle) * radius + imgWidth / 2.0f);

                long pixelColor = img.getRGB(x, y);
                int red = (int) ((pixelColor & 0x00ff0000) >> 16);
                int green = (int) ((pixelColor & 0x0000ff00) >> 8);
                int blue = (int) (pixelColor & 0x000000ff);
                int brightness = (red + green + blue) / 3;

                consistencyArray[radius] += brightness * brightness
                        / consistencyArray.length;
            }
        }

        for (int i = 0; i < consistencyArray.length; i++) {
            consistencyArray[i] = (float) Math.sqrt(consistencyArray[i]);
        }

        for (int i = consistencyArray.length - 1; i > 0; i--) {
            consistencyArray[i] = (consistencyArray[i - 1] - consistencyArray[i]); // /
            // (float)(Math.PI
            // *
            // i
            // +
            // 1.0f);
            // System.out.println(consistencyArray[i]);
        }
        // consistencyArray[0] = 0;

        float average = 0.0f;
        for (int i = 0; i < consistencyArray.length; i++) {
            average += consistencyArray[i]; // / (consistencyArray.length * 2 *
            // Math.PI * i + 1);
        }
        average = average / (float) consistencyArray.length;

        float stdDev = 0.0f;
        for (int i = 0; i < consistencyArray.length; i++) {
            stdDev += (average - consistencyArray[i])
                    * (average - consistencyArray[i]) / (256.0f * 256.0f);
        }
        stdDev = (float) Math.sqrt(stdDev / (float) consistencyArray.length);

        if (Math.abs(average) < 1) { // Avoid division by 0
            average = 1;
        }

        // System.out.println(stdDev + ", " + average);

        return stdDev;
    }

    static private float getImageRotationAngle(BufferedImage img) {
        float widestAngle = 0.0f;
        int imgWidth = img.getWidth();
        if (img.getHeight() < imgWidth) {
            imgWidth = img.getHeight();
        }
        int avgBrightness = 0;

        for (int x = 0; x < imgWidth; x++) {
            for (int y = 0; y < imgWidth; y++) {
                long pixelColor = img.getRGB(x, y);
                int red = (int) ((pixelColor & 0x00ff0000) >> 16);
                int green = (int) ((pixelColor & 0x0000ff00) >> 8);
                int blue = (int) (pixelColor & 0x000000ff);
                avgBrightness += (red + green + blue) / 3;
            }
        }
        avgBrightness = avgBrightness / (imgWidth * imgWidth);

        int brightnessOfRadius = 0;
        int bestRadialBrightness = 0;

        for (float angle = 0.0f; angle < 2.0f * Math.PI; angle += Math.PI / 180.0f) {
            for (float radius = -imgWidth / 2.0f; radius < imgWidth / 2.0f; radius++) {
                int x = (int) (Math.cos(angle) * radius + imgWidth / 2.0f);
                int y = (int) (Math.sin(angle) * radius + imgWidth / 2.0f);

                long pixelColor = img.getRGB(x, y);
                int red = (int) ((pixelColor & 0x00ff0000) >> 16);
                int green = (int) ((pixelColor & 0x0000ff00) >> 8);
                int blue = (int) (pixelColor & 0x000000ff);
                int brightness = (red + green + blue) / 3;

                brightnessOfRadius += brightness;
            }
            if (brightnessOfRadius > bestRadialBrightness) {
                bestRadialBrightness = brightnessOfRadius;
                widestAngle = angle;
            }
            brightnessOfRadius = 0;
        }

        return -widestAngle;
    }

    static private float getCentralBulge(BufferedImage img) {
        int w = img.getWidth();
        int h = img.getHeight();
        float lastAvg = 0;
        float peakDecline = 0.0f;
        float peakDeclineCount = 0.0f;

        for (float radius = 1; radius < w / 2; radius++) {
            float radialAvg = 0.0f;
            for (float angle = 0.0f; angle < 2.0f * Math.PI; angle += Math.PI / 45.0f) {
                int x = (int) (Math.cos(angle) * radius) + w / 2;
                int y = (int) (Math.sin(angle) * radius) + h / 2;

                long pixelColor = img.getRGB(x, y);
                int red = (int) ((pixelColor & 0x00ff0000) >> 16);
                int green = (int) ((pixelColor & 0x0000ff00) >> 8);
                int blue = (int) (pixelColor & 0x000000ff);
                radialAvg += (red + green + blue) / 3;
            }
            radialAvg = radialAvg / 90.0f;

//            if (lastAvg - radialAvg > radialAvg / 6) {
                peakDecline += radius * (lastAvg - radialAvg) / (44); // 36
                peakDeclineCount++;
//            }

            lastAvg = radialAvg;
        }

        if (peakDeclineCount == 0) {
            return -1;
        }

        return peakDecline / peakDeclineCount;
    }

    static private float getChirality(BufferedImage image) {
        float chirality = 0f;
        int width = image.getWidth();
        int height = image.getHeight();
        float angleSum = 0f;
        float currentX = width / 2, currentY = height / 2;
        float radDistance = 0.1f; // 0.2f?
        float lastAngle = 0.0f;

        for (float i = 0.0f; i < width * radDistance; i++) {
            float brightnessSum = 0f, brightestSum = 0f, brightestAngle = 0f;

            for (float angle = -(float) Math.PI / 2.0f + lastAngle; angle < Math.PI
                    / 2.0f + lastAngle; angle += Math.PI / 180.0f) {
                brightnessSum = 0;

                for (float radius = 1; radius < width * radDistance; radius++) {
                    int x = (int) (Math.cos(angle) * radius + currentX);
                    int y = (int) (Math.sin(angle) * radius + currentY);

                    if (x > width - 1) {
                        x = width - 1;
                        i = width * radDistance;
                        angle = (float) Math.PI / 2.0f + lastAngle;
                        radius = width * radDistance;
                    } else if (x < 0) {
                        x = 0;
                        i = width * radDistance;
                        angle = (float) Math.PI / 2.0f + lastAngle;
                        radius = width * radDistance;
                    }

                    if (y > height - 1) {
                        y = height - 1;
                        i = width * radDistance;
                        angle = (float) Math.PI / 2.0f + lastAngle;
                        radius = width * radDistance;
                    } else if (y < 0) {
                        y = 0;
                        i = width * radDistance;
                        angle = (float) Math.PI / 2.0f + lastAngle;
                        radius = width * radDistance;
                    }

                    long pixelColor = image.getRGB(x, y);
                    int red = (int) ((pixelColor & 0x00ff0000) >> 16);
                    int green = (int) ((pixelColor & 0x0000ff00) >> 8);
                    int blue = (int) (pixelColor & 0x000000ff);
                    int brightness = (red + green + blue) / 3;

                    brightnessSum += brightness;
                }

                if (brightnessSum > brightestSum) {
                    brightestAngle = angle;
                    brightestSum = brightnessSum;
                }
            }

            angleSum += brightestAngle;
            lastAngle = brightestAngle;
            currentX += (int) (Math.cos(brightestAngle) * width * (0.15));
            currentY += (int) (Math.sin(brightestAngle) * width * (0.15));
        }
        chirality = (angleSum * radDistance) / width;

        return chirality;
    }

    static private BufferedImage stretchImage(BufferedImage img) {
        int w = img.getWidth();
        int h = img.getHeight();
        int dimmestYValue = 255;
        int dimmestXValue = 255;

        for (int i = 0; i < w / 2; i++) {
            long pixelColor = img.getRGB(w / 2 + i, h / 2);
            int red = (int) ((pixelColor & 0x00ff0000) >> 16);
            int green = (int) ((pixelColor & 0x0000ff00) >> 8);
            int blue = (int) (pixelColor & 0x000000ff);
            int color = (red + green + blue) / 3;
            if (color < dimmestXValue) {
                dimmestXValue = color;
            }
        }

        for (int i = 0; i < h / 2; i++) {
            long pixelColor = img.getRGB(w / 2, h / 2 + i);
            int red = (int) ((pixelColor & 0x00ff0000) >> 16);
            int green = (int) ((pixelColor & 0x0000ff00) >> 8);
            int blue = (int) (pixelColor & 0x000000ff);
            int color = (red + green + blue) / 3;
            if (color < dimmestYValue) {
                dimmestYValue = color;
            }
        }

        int currentBrightness = 255;
        int actualGalaxyWidth = 0;
        while (currentBrightness > 2 * dimmestXValue
                && actualGalaxyWidth < w / 2) {
            long pixelColor = img.getRGB(w / 2 + actualGalaxyWidth, h / 2);
            int red = (int) ((pixelColor & 0x00ff0000) >> 16);
            int green = (int) ((pixelColor & 0x0000ff00) >> 8);
            int blue = (int) (pixelColor & 0x000000ff);
            currentBrightness = (red + green + blue) / 3;

            actualGalaxyWidth++;
        }

        currentBrightness = 255;
        int actualGalaxyHeight = 0;
        while (currentBrightness > 2 * dimmestYValue
                && actualGalaxyHeight < h / 2) {
            long pixelColor = img.getRGB(w / 2, h / 2 + actualGalaxyHeight);
            int red = (int) ((pixelColor & 0x00ff0000) >> 16);
            int green = (int) ((pixelColor & 0x0000ff00) >> 8);
            int blue = (int) (pixelColor & 0x000000ff);
            currentBrightness = (red + green + blue) / 3;

            actualGalaxyHeight++;
        }

        float imgRatio = (float) actualGalaxyWidth / (float) actualGalaxyHeight;
        if (imgRatio > 2.0f) {
            BufferedImage result = new BufferedImage(img.getWidth(),
                    img.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics g = result.getGraphics();
            g.drawImage(img, 0, 0, w, h, 0,
                    (int) (h * (1.0f / imgRatio + 1.0f) / 2.0f), w,
                    (int) (h * (1.0f - (1.0f / imgRatio + 1.0f) / 2.0f)), null);
            img.flush();
            g.dispose();

            return result;
        } else {
            return img;
        }
    }
    
    static private float[] getColor(BufferedImage img) {
        float[] rgb = new float[3];
        int imgWidth = img.getWidth();

        for (int x = 0; x < imgWidth; x++) {
            for (int y = 0; y < imgWidth; y++) {
                long pixelColor = img.getRGB(x, y);
                rgb[0] += ((pixelColor & 0x00ff0000) >> 16);
                rgb[1] += ((pixelColor & 0x0000ff00) >> 8);
                rgb[2] += (pixelColor & 0x000000ff);
            }
        }
        rgb[0] = rgb[0] / (imgWidth * imgWidth * 256.0f);
        rgb[1] = rgb[1] / (imgWidth * imgWidth * 256.0f);
        rgb[2] = rgb[2] / (imgWidth * imgWidth * 256.0f);

        return rgb;
    }

    private BufferedImage getImage(String fileName, int scaledResolution) {
        BufferedImage source = null;
        BufferedImage result = null;
        
        try {
            jLabel6.setText("Image: " + fileName);
            
            // Read the source image file and scale with temp image, store back
            // to source
            source = ImageIO.read(new File(fileName));
            result = new BufferedImage(source.getWidth(), source.getHeight(),
                    BufferedImage.TYPE_INT_RGB);

            Graphics2D tempContext = (Graphics2D) (result.getGraphics());
            tempContext.setColor(Color.black);
            tempContext.clearRect(0, 0, result.getWidth(), result.getHeight());
            tempContext.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                    RenderingHints.VALUE_INTERPOLATION_BICUBIC);
            tempContext.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_QUALITY);
            // Rotate checkbox
            if(jCheckBox1.isSelected()) {
                rotation = getImageRotationAngle(source);
                if(rotation < 0.0) {
                    rotation += Math.PI * 2.0;
                }
                jSlider1.setValue((int)(180.0 * rotation / Math.PI));
                tempContext.rotate(rotation, source.getWidth() / 2, source.getHeight() / 2);
                jLabel5.setText("Rotated: " + Math.round(180.0 * rotation / Math.PI) + " degrees");
            }
            else {
                rotation = (float)Math.PI * jSlider1.getValue() / 180.0f;
                tempContext.rotate(rotation, source.getWidth() / 2, source.getHeight() / 2);
                jLabel5.setText("Rotated: " + Math.round(180.0 * rotation / Math.PI) + " degrees");
            }
            tempContext.drawImage(source, 0, 0, null);
            result.flush();
            tempContext.dispose();

            // Stretch checkbox and consistency greater than 1
            if (getConsistency(result) > 1.0f) {
                result = stretchImage(result);
            }

            float chirality = getChirality(source);

            // Chirality button or chirality value less than 0
            if ((jToggleButton1.isSelected() && chirality > 0) 
                    || (!jToggleButton1.isSelected() && chirality <= 0)) {
                
                // flip the image
                int w = result.getWidth();
                int h = result.getHeight();
                source = new BufferedImage(scaledResolution, scaledResolution,
                        BufferedImage.TYPE_INT_RGB);
                Graphics resultContext = source.getGraphics();
                resultContext.drawImage(result, scaledResolution, 0, 0,
                        scaledResolution, 0, 0, w, h, null);
            } else {
                source = new BufferedImage(scaledResolution, scaledResolution,
                        BufferedImage.TYPE_INT_RGB);
                Graphics resultContext = source.getGraphics();
                resultContext.drawImage(result, 0, 0, scaledResolution,
                        scaledResolution, null);
            }
            source.flush();

            // ImageIO.write(source, "png", new File("temp/" + fileName));
        } catch (Exception ex) {
            System.out.println("Failed to open: " + fileName + ", "
                    + ex.toString());
        }
        return source;
    }

    static private void fillGalaxyDescriptions() {
        try {
            int headerLength = 82;
            BufferedReader in = new BufferedReader(new FileReader(
                    "galaxies/EFIGI_attributes.txt"));

            // Find data length
            int dataLength = 0;
            while (in.ready()) {
                in.readLine();
                dataLength++;
            }
            dataLength -= headerLength;
            galaxyFiles = new String[dataLength][2];
            in.close();

            // Restart at beginning now that we know size of data file, move
            // past header info
            in = new BufferedReader(new FileReader(
                    "galaxies/EFIGI_attributes.txt"));
            for (int i = 0; i < headerLength; i++) {
                in.readLine();
            }
            for (int i = 0; i < galaxyFiles.length; i++) {
                String[] readLine = in.readLine().split(" ");
                int temp = 1;
                while (readLine[temp].equals("")) {
                    temp++;
                }
                galaxyFiles[i][0] = readLine[0]; // Galaxy data file name
                galaxyFiles[i][1] = readLine[temp]; // Galaxy class
            }

            /*
             * for(int i = 0; i < galaxyData.length; i++) {
             * System.out.println(galaxyData[i][0] + ": " + galaxyData[i][1]); }
             */

        } catch (Exception ex) {
            System.out.println("Error reading galaxy data file");
        }
    }

    private void setImageIndex(int index) {
        Graphics g = canvas1.getGraphics();
        int cHeight = canvas1.getHeight();
        if (cHeight < 100) {
            cHeight = 100;
        }
        
        currentImage = getImage("galaxies/" + galaxyFiles[index][0] + ".jpg", cHeight);
        
        g.drawImage(currentImage.getScaledInstance(cHeight, cHeight, Image.SCALE_AREA_AVERAGING),
                0, 0, cHeight, cHeight, null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GalaxyToolForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GalaxyToolForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GalaxyToolForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GalaxyToolForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new GalaxyToolForm().setVisible(true);
            }
        });
    }  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private java.awt.Canvas canvas2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
